//------------------------------------//
//  $FUNCTIONS
//------------------------------------//

// px2em
//   Convert pixels to ems
@function px2em($px) {
  @if unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return px2em($px * 1px);
  } @else if unit($px) == em {
    @return $px;
  }
  @return ($px / 16px) * 1em;
}

// px2rem
//   Convert pixels to rems
@function px2rem($px, $rel-to: $base-font-size--mobile) {
  @if unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return px2rem($px * 1px);
  } @else if unit($px) == rem {
    @return $px;
  }
  @return ($px / $rel-to) * 1rem;
}

// get-breakpoint-width
//   Get a breakpoint's width from the map
@function get-breakpoint-width($name, $breakpoints: $media-breakpoints) {
  @if map-has-key($breakpoints, $name) {
    @return map-get($breakpoints, $name);
  } @else {
    @error "Breakpoint #{$name} wasn't found in $media-breakpoints.";
  }
}

// get-feature
//   Get a media feature's definition from the map
@function get-feature($name, $features: $media-features) {
  @if map-has-key($features, $name) {
    @return map-get($features, $name);
  } @else {
    @return false;
  }
}

// calc-interpolation
//   Return calc expression for fluid mixin
@function calc-interpolation($min-width, $max-width, $min-value, $max-value) {
	$a: ($max-value - $min-value) / ($max-width - $min-width);
	$b: $min-value - $a * $min-width;

	$sign: "+";
	@if ($b < 0) {
		$sign: "-";
		$b: abs($b);
	}
	@return calc(#{$a*100}vw #{$sign} #{$b});
}
