//------------------------------------//
//  $MIXINS
//------------------------------------//

// Micro clearfix
@mixin clearfix {
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

// Image replacement
@mixin hide-text {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Placeholder text
@mixin placeholder {
  // scss-lint:disable VendorPrefix
  &::-moz-placeholder { @content; } // Firefox 19+
  &:-ms-input-placeholder { @content; } // IE 10+
  &::-ms-input-placeholder { @content; } // Edge
  &::-webkit-input-placeholder { @content; } // Safari and Chrome
}

// Form validation states
@mixin form-control-validation($text-color: $gray-dark, $border-color: $gray) {
  label,
  .radio,
  .checkbox { color: $text-color; }

  .form-control {
    border-color: $border-color;

    &:focus {
      box-shadow: 0 0 0 .2rem rgba($border-color, .25);
    }
  }
}

// Form control focus state, based on WebKit's default styles
@mixin form-control-focus($color: #419bf9) {
  &:focus {
    border-color: $color;
    outline: 0;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 0 .2rem rgba($color, .25);
  }
}


// ***************************************************************************
// Padding mixins
//
// padding-horizontal and padding-vertical apply the given amount of padding
// to padding-{left,right} and padding-{top,bottom}, respectively.
//
// USAGE:
//
// .island {
//   @include padding-vertical($base-spacing-unit);
// }
//
// ***************************************************************************

@mixin padding-horizontal($amount) {
  padding-left: $amount;
  padding-right: $amount;
}

@mixin padding-vertical($amount) {
  padding-top: $amount;
  padding-bottom: $amount;
}


// ***************************************************************************
// Fluid mixin
//
// Inspired by Mike Riethmuller's Fluid Type Technique:
// https://www.madebymike.com.au/writing/fluid-type-calc-examples/
//
// Create fluid typography that scales smoothly between specific values within
// a specific viewport range. This mixin can be applied to any numerical
// property such as padding, margin, line-height and font-size. Multiple
// properties with the same values can be listed (a, b).
//
// $min-breakpoint and $max-breakpoint are the browser widths where the scaling
// starts and stops. You can use breakpoint aliases set in $media-breakpoints
// (in _vars.scss) or custom widths. Pixel values will be converted to ems.
//
// $min-value and $max-value are the starting and ending sizes, specified in
// pixels or rems. Pixel values will be converted to rems.
//
// USAGE:
//
// h1 {
//   @include fluid(font-size, hand, desk, 32px, 48px);
// }
// .hero {
//   @include fluid((padding-top, padding-bottom), 320px, 1200px, 1rem, 2rem);
// }
//
// OUTPUT:
//
// h1 { font-size: 2rem; }
// @media screen and (min-width: 30em) {
//   h1 { font-size: calc(2.94118vw + 1.11765rem); }
// }
// @media screen and (min-width: 64em) {
//   h1 { font-size: 3rem; }
// }
// .hero {
//   padding-top: 1rem;
//   padding-bottom: 1rem;
// }
// @media screen and (min-width: 20em) {
//   .hero {
//     padding-top: calc(1.81818vw + 0.63636rem);
//     padding-bottom: calc(1.81818vw + 0.63636rem);
//   }
// }
// @media screen and (min-width: 75em) {
//   .hero {
//     padding-top: 2rem;
//     padding-bottom: 2rem;
//   }
// }
//
// ***************************************************************************

@mixin fluid($properties, $min-breakpoint, $max-breakpoint, $min-value, $max-value) {
  // convert breakpoints to ems and rems
  @if type-of($min-breakpoint) == string {
    $min-breakpoint: get-breakpoint-width($min-breakpoint);
  }
  $min-em-width: px2em($min-breakpoint);
  $min-rem-width: px2rem($min-breakpoint);

  @if type-of($max-breakpoint) == string {
    $max-breakpoint: get-breakpoint-width($max-breakpoint);
  }
  $max-em-width: px2em($max-breakpoint);
  $max-rem-width: px2rem($max-breakpoint);

  // convert values to rems
  $min-rem-value: px2rem($min-value);
  $max-rem-value: px2rem($max-value);

	@each $property in $properties {
		#{$property}: $min-rem-value;
	}

	@media screen and (min-width: $min-em-width) {
		@each $property in $properties {
			#{$property}: calc-interpolation($min-rem-width, $max-rem-width, $min-rem-value, $max-rem-value);
		}
	}

	@media screen and (min-width: $max-em-width) {
		@each $property in $properties {
			#{$property}: $max-rem-value;
		}
	}
}


// ***************************************************************************
// Media query mixin
//
// When using spaceBase, styles should be written mobile-first.
// The media mixin can override these base styles in a variety of ways:
//   - starting at a breakpoint ($from: x)
//   - up to a breakpoint ($upto: y)
//   - between two breakpoints ($from: x, $upto: y)
//   - for specific media features (e.g. retina, orientation)
//   - for different media types ($type: print)
//
// You can use breakpoint aliases set in $media-breakpoints (in _vars.scss)
// or custom widths. Pixel values will be converted to ems.
//
// Commonly-used media features are defined in $media-features (in _vars.scss).
// You can define additional feature aliases or use custom one-off expressions.
//
// It's important to note that $upto is exclusive.
// This means that `@include media($upto: 768px)` will set a max-width of
// 47.99em (roughly 767px).
//
// USAGE:
//
// @include media($from: hand) { ... }
// @include media($upto: desk) { ... }
// @include media($from: lap, $upto: desk) { ... }
// @include media($from: 800px, $upto: 900px) { ... }
// @include media(landscape, $upto: desk) { ... }
// @include media($type: print) { ... }
// @include media('(device-radius: 50%)') { ... }
//
// OUTPUT:
//
// @media screen and (min-width: 30em) { ... }
// @media screen and (max-width: 63.99em) { ... }
// @media screen and (min-width: 48em) and (max-width: 63.99em) { ... }
// @media screen and (min-width: 50em) and (max-width: 56.25em) { ... }
// @media screen and (max-width: 63.99em) and (orientation: landscape) { ... }
// @media print { ... }
// @media screen and (device-radius: 50%) { ... }
//
// ***************************************************************************

@mixin media($feature:false, $from:false, $upto:false, $type:screen) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: px2em($from);
    } @else if get-breakpoint-width($from) {
      $min-width: px2em(get-breakpoint-width($from));
    }
  }

  // Upto: that breakpoint (exclusive)
  @if $upto {
    @if type-of($upto) == number {
      $max-width: px2em($upto);
    } @else if get-breakpoint-width($upto) {
      $max-width: px2em(get-breakpoint-width($upto)) - .01em;
    }
  }

  @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
  @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
  @if $feature {
    // Pass through custom expression or get defined expression
    $original-feature: $feature;
    $feature: get-feature($feature);
    @if $feature {
      $media-query: '#{$media-query} and #{$feature}';
    } @else {
      $media-query: '#{$media-query} and (#{$original-feature})';
    }
  }

  // Remove unnecessary media query prefix 'all and '
  @if ($type == 'all' and $media-query != '') {
    $type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$type + $media-query} {
    @content;
  }
}
